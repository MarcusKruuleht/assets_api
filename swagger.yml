openapi: 3.0.2
info:
    title: assets
    version: 1.0.0
paths:
    /sessions:
        summary: Path used to manage the list of sessions.
        description: >-
            The REST endpoint/path used to list and create zero or more `session` entities.  This path
            contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
        post:
            requestBody:
                description: A new `session` to be created.
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/session'
                required: true
            tags:
                - sessions
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/session'
                            examples:
                                '201':
                                    value:
                                        sessionId: 174089643
                                        isAdmin: true
                    description: Successful response.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                Invalid JSON:
                                    value:
                                        error: Unexpected token a in JSON at position 0
                                One or all params are missing:
                                    value:
                                        error: One or all params are missing
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                'Unauthorized: username or password is incorrect':
                                    value:
                                        error: 'Unauthorized: username or password is incorrect'
                    description: Unauthorized
            operationId: createsession
            summary: Create a session
            description: Creates a new instance of a `session`.
        delete:
            tags:
                - sessions
            responses:
                '204':
                    description: Session successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                'Unauthorized: session is invalid':
                                    value:
                                        error: 'Unauthorized: session is invalid'
                                'Unauthorized: no authorization header':
                                    value:
                                        error: 'Unauthorized: no authorization header'
                                'Unauthorized: user is invalid':
                                    value:
                                        error: 'Unauthorized: user is invalid'
                    description: Unauthorized
            security:
                -
                    bearer: []
            summary: Logout
            description: Deletes a `session`.
    /users:
        summary: Path used to creating users.
        description: This path contains `Post` operation to create new users.
        post:
            tags:
                - users
            responses:
                '201':
                    content:
                        application/json:
                            examples:
                                user:
                                    value:
                                        id: 3
                                        email: mama@email.com
                                        name: mama
                                        password: mama
                    description: Created user
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                Password is missing:
                                    value:
                                        error: Parameter password is missing
                                Name is missing:
                                    value:
                                        error: Parameter name is missing
                                Email is missing:
                                    value:
                                        error: Parameter email is missing
                    description: Parameter missing
                '500':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/error'
                            examples:
                                Email exists already:
                                    value:
                                        error: |-

                                            Invalid `prisma.user.create()` invocation in
                                            C:\Users\marcus\desktop\assets_api\index.js:20:40

                                              17 const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/
                                              18 try {
                                              19     checkParams(req, res, [{ name: 'email', type: 'string', regex: emailRegex }, { name: 'password', type: 'string', minLength: 3 }, { name: 'name', type: 'string', minLength: 3 }])
                                            â†’ 20     const user = await prisma.user.create(
                                            Unique constraint failed on the fields: (`email`)
                    description: Server error
            operationId: createuser
            summary: Create a user.
            description: Creates a new instance of a `user`.
components:
    schemas:
        session:
            title: Root Type for session
            description: ''
            type: object
            properties:
                username:
                    type: string
                password:
                    type: string
            example:
                username: marcus
                password: qwerty
        error:
            title: Root Type for error
            description: ''
            type: object
            properties:
                error:
                    type: string
            example:
                error: 'Unauthorized: username or password is incorrect'
        user:
            description: ''
            required:
                - name
                - email
                - password
            type: object
            properties:
                name:
                    description: ''
                    type: string
                email:
                    description: ''
                    type: string
                password:
                    format: password
                    description: ''
                    type: string
            example:
                id: 3
                email: mama@email.com
                name: mama
                password: mama
    securitySchemes:
        bearer:
            scheme: bearer
            type: http
tags:
    -
        name: sessions
        description: ''
